// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// A question, which is just some text to be sent to the user,
// and an optional error message if the question is not answered
// properly

model Question {
  id            Int         @id @default(autoincrement())
  text          String
  errorResponse String?
  TreeState     TreeState[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  Transition  Transition[]
}

model Transition {
  id             Int        @id @default(autoincrement())
  currentState   TreeState  @relation("CurrentState", fields: [currentStateId], references: [id])
  currentStateId Int
  nextState      TreeState  @relation("NextState", fields: [nextStateId], references: [id])
  nextStateId    Int
  answer         Answer     @relation(fields: [answerId], references: [id])
  answerId       Int
  name           String
  Entry          Entry[]
}

model TreeState {
  id           Int          @id @default(autoincrement())
  name         String
  retries      Int
  question     Question     @relation(fields: [questionId], references: [id])
  questionId   Int
  Tree         Tree[]
  Session      Session[]
  CurrentState Transition[] @relation("CurrentState")
  NextState    Transition[] @relation("NextState")
}

model Action {
  id   Int    @id @default(autoincrement())
  type String
  Tree Tree[]
}

model Tree {
  id           Int       @id @default(autoincrement())
  trigger      String
  rootState    TreeState @relation(fields: [rootStateId], references: [id])
  rootStateId  Int
  completion   Action    @relation(fields: [completionId], references: [id])
  completionId Int
  Session      Session[]
}

model Connection {
  id          Int       @id @default(autoincrement())
  phoneNumber String
  name        String
  Session     Session[]
}

model Session {
  id           Int        @id @default(autoincrement())
  cancelled    Boolean?
  startTime    DateTime   @default(now())
  connection   Connection @relation(fields: [connectionId], references: [id])
  connectionId Int
  state        TreeState  @relation(fields: [stateId], references: [id])
  stateId      Int
  tree         Tree       @relation(fields: [treeId], references: [id])
  treeId       Int
  tries        Int
  Entry        Entry[]
}

model Entry {
  id           Int        @id
  time         DateTime   @default(now())
  text         String
  sequence     Int
  transition   Transition @relation(fields: [transitionId], references: [id])
  transitionId Int
  session      Session    @relation(fields: [sessionId], references: [id])
  sessionId    Int
}

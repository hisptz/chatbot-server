// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// A question, which is just some text to be sent to the user,
// and an optional error message if the question is not answered
// properly

model Question {
  id            String      @id @default(uuid())
  text          String
  errorResponse String?
  TreeState     TreeState[]
}

model Answer {
  id          String       @id @default(uuid())
  name        String
  description String
  Transition  Transition[]
}

model Transition {
  id             String    @id @default(uuid())
  currentState   TreeState @relation("CurrentState", fields: [currentStateId], references: [id])
  currentStateId String
  nextState      TreeState @relation("NextState", fields: [nextStateId], references: [id])
  nextStateId    String
  answer         Answer    @relation(fields: [answerId], references: [id])
  answerId       String
  name           String
  Entry          Entry[]
}

model TreeState {
  id           String       @id @default(uuid())
  name         String
  type         String
  retries      Int
  question     Question     @relation(fields: [questionId], references: [id])
  owningTree   Tree         @relation("OwningTree", fields: [treeId], references: [id])
  treeId       String
  questionId   String
  Tree         Tree[]
  Session      Session[]
  CurrentState Transition[] @relation("CurrentState")
  NextState    Transition[] @relation("NextState")
}

model Action {
  id   String @id @default(uuid())
  type String
  Tree Tree[]
}

model Tree {
  id           String      @id @default(uuid())
  trigger      String
  rootState    String
  completion   Action      @relation(fields: [completionId], references: [id])
  completionId String
  Session      Session[]
  states       TreeState[] @relation("OwningTree")
  TreeState    TreeState?  @relation(fields: [treeStateId], references: [id])
  treeStateId  String?
}

model Connection {
  id          String    @id @default(uuid())
  phoneNumber String
  name        String
  Session     Session[]
}

model Session {
  id           String     @id @default(uuid())
  cancelled    Boolean?
  startTime    DateTime   @default(now())
  connection   Connection @relation(fields: [connectionId], references: [id])
  connectionId String
  state        TreeState  @relation(fields: [stateId], references: [id])
  stateId      String
  tree         Tree       @relation(fields: [treeId], references: [id])
  treeId       String
  tries        Int
  Entry        Entry[]
}

model Entry {
  id           String     @id @default(uuid())
  time         DateTime   @default(now())
  text         String
  sequence     Int
  transition   Transition @relation(fields: [transitionId], references: [id])
  transitionId String
  session      Session    @relation(fields: [sessionId], references: [id])
  sessionId    String
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A question, which is just some text to be sent to the user,
// and an optional error message if the question is not answered
// properly
// enum ActionType {
//   ROUTER
//   ASSIGN
//   FUNCTION
//   WEBHOOK
//   MENU
//   INPUT
//   QUIT
// }

// enum ActionAPICallMethod{
//   GET
//   POST
// }

// enum actionAPIResponseType {
//   'array-buffer'
//   'json'
// }

model Action {
  id               String      @id @default(uuid())
  type             String
  nextState        String?
  text             String?
  params           String?
  dataKey          String?
  functionName     String?
  webhookURL       String?
  responseType     String?
  responseDataPath String?
  headers          String?
  method           String?
  body             String?
  messageFormat    String?
  FlowState        FlowState[]
  routes           Route[]
  options          String?
}

model Route {
  id          String  @id @default(uuid())
  action      Action  @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actionId    String
  expression  String?
  nextStateId String
}

model FlowState {
  id         String    @id @default(uuid())
  action     Action    @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actionId   String
  retries    Int
  owningFlow Flow      @relation("OwningFlow", fields: [flowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flowId     String
  Flow       Flow[]
  Session    Session[]
}

model Flow {
  id          String      @id @default(uuid())
  trigger     String      @unique
  rootState   String
  Session     Session[]
  states      FlowState[] @relation("OwningFlow")
  FlowState   FlowState?  @relation(fields: [FlowStateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FlowStateId String?
}

model Connection {
  id         String    @id @default(uuid())
  identifier String    @unique
  Session    Session[]
}

// enum SessionStateStep {
//   WAITING
//   COMPLETED
// }

model Session {
  id           String     @id @default(uuid())
  cancelled    Boolean?
  startTime    DateTime   @default(now())
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  connectionId String
  state        FlowState  @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stateId      String
  Flow         Flow       @relation(fields: [FlowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FlowId       String
  tries        Int
  Entry        Entry[]
  data         String
  step         String?
}

model Entry {
  id        String   @id @default(uuid())
  time      DateTime @default(now())
  text      String
  sequence  Int
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId String
}

model Job {
  id        String      @id @default(uuid())
  data      String
  Schedule  Schedule[]
  JobStatus JobStatus[]
}

model JobStatus {
  id        String    @id @default(uuid())
  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId     String
  startTime DateTime  @default(now())
  endTime   DateTime?
  status    String
}

model Schedule {
  id    String @id @default(uuid())
  cron  String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String
}
